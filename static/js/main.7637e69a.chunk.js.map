{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","reportWebVitals.js","index.js"],"names":["TweetsComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","newVal","current","value","tempNewTweets","unshift","content","likes","id","ref","required","name","type","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","console","log","send","loadTweets","alert","map","item","index","Tweet","tweet","ActionBtn","action","setLikes","userLike","setUserLike","actionDisplay","display","onClick","App","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","appE1","document","getElementById","ReactDOM","render","tweetsE1"],"mappings":"+MAAe,G,MAAA,IAA0B,kC,sBCIlC,SAASA,EAAgBC,GAC5B,IAAMC,EAAcC,IAAMC,YADS,EAEDC,mBAAS,IAFR,mBAE5BC,EAF4B,KAEjBC,EAFiB,KAgBnC,OAAO,sBAAKC,UAAWP,EAAMO,UAAtB,UACH,qBAAKA,UAAU,cAAf,SACI,uBAAMC,SAfO,SAACC,GAClBA,EAAMC,iBACN,IAAMC,EAASV,EAAYW,QAAQC,MAC/BC,EAAa,YAAOT,GAExBS,EAAcC,QAAS,CACnBC,QAASL,EACTM,MAAO,EACPC,GAAI,QAERZ,EAAaQ,GACbb,EAAYW,QAAQC,MAAQ,IAIxB,UACI,0BAAUM,IAAKlB,EAAamB,UAAU,EAAMb,UAAU,eAAec,KAAK,UAG1E,wBAAQC,KAAK,SAASf,UAAU,uBAAhC,wBAGR,cAACgB,EAAD,CAAYlB,UAAWA,OAIxB,SAASkB,EAAWvB,GAAQ,IAAD,EACMI,mBAAS,IADf,mBACvBoB,EADuB,KACXC,EADW,OAEFrB,mBAAS,IAFP,mBAEvBsB,EAFuB,KAEfC,EAFe,KAqB9B,OAjBAC,qBAAU,WACN,IAAMC,EAAQ,YAAI7B,EAAMK,WAAWyB,OAAON,GACtCK,EAAME,QAAUL,EAAOK,QACvBJ,EAAUE,KAEf,CAAC7B,EAAMK,UAAWmB,EAAYE,IAEjCE,qBAAU,YC5CP,SAAoBI,GACvB,IAAMC,EAAM,IAAIC,eAIhBD,EAAIE,aADiB,OAErBF,EAAIG,KAJW,MACH,qCAIZH,EAAII,OAAS,WACXL,EAASC,EAAIK,SAAUL,EAAIM,SAE7BN,EAAIO,QAAU,SAAUC,GACtBC,QAAQC,IAAIF,GACZT,EAAS,CAAC,QAAW,4BAA6B,MAEpDC,EAAIW,ODsCAC,EAPmB,SAACP,EAAUC,GAChB,MAAXA,EACCd,EAAca,GAEdQ,MAAM,2BAIZ,CAACtB,IACIE,EAAOqB,KAAI,SAACC,EAAMC,GACrB,OAAO,cAACC,EAAD,CAAOC,MAAOH,EAAMzC,UAAU,uCAA9B,UAA4E0C,EAA5E,kBAIR,SAASG,EAAUpD,GAAO,IACtBmD,EAAkBnD,EAAlBmD,MAAOE,EAAWrD,EAAXqD,OADc,EAEFjD,mBAAS+C,EAAMlC,MAAQkC,EAAMlC,MAAQ,GAFnC,mBAErBA,EAFqB,KAEdqC,EAFc,OAGIlD,oBAA4B,IAAnB+C,EAAMI,UAHnB,mBAGrBA,EAHqB,KAGXC,EAHW,KAItBjD,EAAYP,EAAMO,UAAYP,EAAMO,UAAY,yBAChDkD,EAAgBJ,EAAOK,QAAUL,EAAOK,QAAU,SAclDA,EAA0B,SAAhBL,EAAO/B,KAAP,UAA4BL,EAA5B,aAAsCwC,GAAkBA,EACxE,OAAO,wBAAQlD,UAAWA,EAAWoD,QAdjB,SAAClD,GACjBA,EAAMC,iBACc,SAAhB2C,EAAO/B,QACU,IAAbiC,GAEAD,EAASrC,EAAQ,GACjBuC,GAAY,KAEZF,EAASrC,EAAQ,GACjBuC,GAAY,MAKjB,SAAqDE,IAGzD,SAASR,EAAMlD,GAAQ,IACnBmD,EAASnD,EAATmD,MACD5C,EAAYP,EAAMO,UAAYP,EAAMO,UAAY,0BACtD,OAAO,sBAAKA,UAAWA,EAAhB,UACH,8BAAI4C,EAAMjC,GAAV,MAAiBiC,EAAMnC,WACvB,sBAAKT,UAAU,gBAAf,UACA,cAAC6C,EAAD,CAAWD,MAAOA,EAAOE,OAAQ,CAAC/B,KAAM,OAAQoC,QAAS,WACzD,cAACN,EAAD,CAAWD,MAAOA,EAAOE,OAAQ,CAAC/B,KAAM,SAAUoC,QAAS,YAC3D,cAACN,EAAD,CAAWD,MAAOA,EAAOE,OAAQ,CAAC/B,KAAM,UAAWoC,QAAQ,YEnEpDE,MAjBf,WAEE,OACE,qBAAKrD,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKsD,IAAKC,EAAMvD,UAAU,WAAWwD,IAAI,SACzC,sCACO,8CADP,0BAGE,8BACE,cAAChE,EAAD,YCJGiE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCRQ,EAAQC,SAASC,eAAe,QAClCF,GACAG,IAASC,OAAO,cAAC,EAAD,IAASJ,GAE7B,IAAMK,EAAWJ,SAASC,eAAe,aACrCG,GACAF,IAASC,OAAO,cAAC9E,EAAD,IAAqB+E,GAOzCd,M","file":"static/js/main.7637e69a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useEffect, useState} from 'react'\nimport {loadTweets} from '../lookup'\n\n\nexport function TweetsComponent(props) {\n    const textAreaRef = React.createRef()\n    const [newTweets, setNewTweets] = useState([])\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        const newVal = textAreaRef.current.value\n        let tempNewTweets = [...newTweets]\n        // change this to a server side call\n        tempNewTweets.unshift(({\n            content: newVal,\n            likes: 0,\n            id: 12313\n        }))\n        setNewTweets(tempNewTweets)\n        textAreaRef.current.value = ''\n    }\n    return <div className={props.className}>\n        <div className='col-12 mb-3'>\n            <form onSubmit={handleSubmit}>\n                <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\n\n                </textarea>\n                <button type='submit' className='btn btn-primary my-3'>Tweet</button>\n            </form>\n        </div>\n        <TweetsList newTweets={newTweets} />\n    </div>\n}\n\nexport function TweetsList(props) {\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n\n    useEffect(() => {\n        const final = [...props.newTweets].concat(tweetsInit)\n        if (final.length != tweets.length) {\n            setTweets(final)\n        }\n    }, [props.newTweets, tweetsInit, tweets])\n\n    useEffect(() => {\n        const myCallback = (response, status) => {\n        if(status === 200){\n            setTweetsInit(response)\n        } else {\n            alert(\"There was an error\")\n        }\n        }\n        loadTweets(myCallback)\n    },[tweetsInit])\n    return tweets.map((item, index)=>{\n        return <Tweet tweet={item} className='my-5 py-5 border bg-white text-dark' key={`${index}-{item.id}`} />\n        })\n}\n\nexport function ActionBtn(props){\n    const {tweet, action} =  props \n    const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0)\n    const [userLike, setUserLike] = useState(tweet.userLike === true ? true : false)\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\n    const actionDisplay = action.display ? action.display : 'Action'\n    const handleClick = (event) => {\n        event.preventDefault()\n        if (action.type === 'like'){\n            if (userLike === true) {\n                // perahaps 1 Unlike it\n                setLikes(likes - 1)\n                setUserLike(false)\n            } else {\n                setLikes(likes + 1)\n                setUserLike(true)\n            }\n        }\n    }\n    const display = action.type === 'like' ? `${likes}  ${actionDisplay}` : actionDisplay\n    return <button className={className} onClick={handleClick}>{display}</button>\n  }\n  \nexport function Tweet(props) {\n    const {tweet} = props\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n    return <div className={className}>\n        <p>{tweet.id} - {tweet.content}</p>\n        <div className='btn btn-group'>\n        <ActionBtn tweet={tweet} action={{type: \"like\", display: \"Likes\"}} />\n        <ActionBtn tweet={tweet} action={{type: \"unlike\", display: \"Unlike\"}} />\n        <ActionBtn tweet={tweet} action={{type: \"retweet\", display:\"\"}} />\n        </div>\n    </div>\n    }","export function loadTweets(callback){\n    const xhr = new XMLHttpRequest()\n    const method = 'GET' // \"POST\"\n    const url = 'http://localhost:8000/api/tweets/'\n    const responseType = \"json\"\n    xhr.responseType = responseType\n    xhr.open(method, url)\n    xhr.onload = function() {\n      callback(xhr.response, xhr.status)\n    }\n    xhr.onerror = function (e){\n      console.log(e)\n      callback({\"message\": \"The request was an error\"}, 400)\n    }\n    xhr.send()\n  }","import React from 'react';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TweetsComponent} from './tweets'\nfunction App() {  \n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n          <div>\n            <TweetsComponent />\n          </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\nimport {TweetsComponent} from './tweets'\nimport reportWebVitals from './reportWebVitals';\n\nconst appE1 = document.getElementById('root');\nif (appE1) {\n    ReactDOM.render(<App />, appE1);\n}\nconst tweetsE1 = document.getElementById('tweetme-2')\nif (tweetsE1){\n    ReactDOM.render(<TweetsComponent />, tweetsE1);\n}\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}